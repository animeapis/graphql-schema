# DO NOT EDIT! Generated by protoc-gen-graphql.

type Identity_Query {
  getUserProfile(input: GetUserProfileRequestInput!): UserProfile!
  getUser(input: GetUserRequestInput!): User!
  listUsers(input: ListUsersRequestInput!): ListUsersResponse!
  getUserSettings(input: GetUserSettingsRequestInput!): UserSettings!
  getUserNotifications(input: GetUserNotificationsRequestInput!): UserNotifications!
  getUserDefaults(input: GetUserDefaultsRequestInput!): UserDefaults!
  getGroup(input: GetGroupRequestInput!): Group!
  listGroups(input: ListGroupsRequestInput!): ListGroupsResponse!
}

type Identity_Mutation {
  createUser(input: CreateUserRequestInput!): User!
  updateUser(input: UpdateUserRequestInput!): User!
  deleteUser(input: DeleteUserRequestInput!): Boolean!
  updateUserSettings(input: UpdateUserSettingsRequestInput!): UserSettings!
  updateUserNotifications(input: UpdateUserNotificationsRequestInput!): UserNotifications!
  createGroup(input: CreateGroupRequestInput!): Group!
  updateGroup(input: UpdateGroupRequestInput!): Group!
  deleteGroup(input: DeleteGroupRequestInput!): Boolean!
}

"""
This message is returned only when a user wants to fetch information about
another user and the amount of information returned is greatly reduced to
ensure that personal and confidential information is never disclosed by
accident to other users. The user profile is read-only.
"""
type UserProfile {
  """
  The resource name of the user.
  """
  name: String!
  """
  The profile image of the user.
  """
  profileImage: String!
  """
  The banner image of the user.
  """
  bannerImage: String!
  """
  The public username of the user.
  """
  username: String!
  """
  The public discriminator of the user.
  """
  discriminator: String!
  """
  The birthday of the user, this value is hidden for private profiles.
  """
  birthday: Date
  """
  The gender of the user, this value is hidden for private profiles.
  """
  gender: Gender!
}

type User {
  """
  The resource name of the user.
  """
  name: String!
  """
  The uuid that identifies the user during the authentication flow.
  """
  uuid: String!
  """
  The public username of the user.
  """
  username: String!
  """
  The public discriminator of the user.
  """
  discriminator: String!
  """
  The primary email address of the user.
  """
  primaryEmail: String!
  """
  Whether the primary email address has been verified.
  """
  primaryEmailVerified: Boolean!
  """
  The given name of the user.
  """
  givenName: String!
  """
  The family name of the user.
  """
  familyName: String!
  """
  The name of the user.
  """
  displayName: String!
  """
  The country where the user is located at, must be a valid ISO-3166 code.
  """
  countryCode: String!
  """
  The locale preferred by the user, must be a valid BCP-47 code.
  """
  locale: String!
  """
  The fallback locale preferred by the user, must be a valid BCP-47 code.
  The only allowed values are eng, jpn, and jpn-Latn (romaji).
  """
  localeFallback: String!
  """
  The birthday defined by the user, this value is used to determine whether
  the user should be allowed to access explicit and sensitive content.
  """
  birthday: Date
  """
  The gender of the user.
  """
  gender: Gender!
  """
  The profile image of the user.
  """
  profileImage: String!
  """
  The banner image of the user.
  """
  bannerImage: String!
}

input UserInput {
  """
  The resource name of the user.
  """
  name: String
  """
  The public username of the user.
  """
  username: String
  """
  The given name of the user.
  """
  givenName: String
  """
  The family name of the user.
  """
  familyName: String
  """
  The country where the user is located at, must be a valid ISO-3166 code.
  """
  countryCode: String
  """
  The locale preferred by the user, must be a valid BCP-47 code.
  """
  locale: String
  """
  The fallback locale preferred by the user, must be a valid BCP-47 code.
  The only allowed values are eng, jpn, and jpn-Latn (romaji).
  """
  localeFallback: String
  """
  The birthday defined by the user, this value is used to determine whether
  the user should be allowed to access explicit and sensitive content.
  """
  birthday: DateInput
  """
  The gender of the user.
  """
  gender: Gender
  """
  The profile image of the user.
  """
  profileImage: String
  """
  The banner image of the user.
  """
  bannerImage: String
}

type UserSettings {
  """
  The resource name of the user.
  """
  name: String!
  """
  A private user will only have the username, discriminator, profile image
  and banner image public.
  """
  profileVisibility: UserSettings_Visibility!
  """
  Whether the user choose to see explicit content during navigation.
  """
  showExplicitContent: Boolean!
  """
  Whether the user has enabled the developer mode.
  """
  enableDeveloperMode: Boolean!
}

input UserSettingsInput {
  """
  The resource name of the user.
  """
  name: String
  """
  A private user will only have the username, discriminator, profile image
  and banner image public.
  """
  profileVisibility: UserSettings_Visibility
  """
  Whether the user choose to see explicit content during navigation.
  """
  showExplicitContent: Boolean
  """
  Whether the user has enabled the developer mode.
  """
  enableDeveloperMode: Boolean
}

type UserDefaults {
  """
  The system-managed album dedicated to user profile images.
  """
  albumProfile: String!
  """
  The system-managed album dedicated to user banner images.
  """
  albumBanner: String!
  """
  The system-managed playlist dedicated to user liked content.
  """
  playlistLiked: String!
  """
  The system-managed playlist dedicated to user saved for later content.
  """
  playlistLater: String!
}

type UserNotifications {
  """
  The resource name of the user.
  """
  name: String!
}

input UserNotificationsInput {
  """
  The resource name of the user.
  """
  name: String
}

type Group {
  """
  The resource name of the group.
  """
  name: String!
  """
  The list of members of the group. Groups might include other groups.
  """
  members: [String!]!
  """
  An etag for concurrency control, ignored during creation.
  """
  etag: String!
}

input GroupInput {
  """
  The resource name of the group.
  """
  name: String
  """
  The list of members of the group. Groups might include other groups.
  """
  members: [String!]
  """
  An etag for concurrency control, ignored during creation.
  """
  etag: String
}

input GetUserProfileRequestInput {
  """
  The name of the user to retrieve the profile from.
  """
  name: String
}

input GetUserRequestInput {
  """
  The name of the user to retrieve.
  """
  name: String
}

input ListUsersRequestInput {
  """
  If unspecified, server will pick an appropriate default.
  """
  pageSize: Int
  """
  The value returned from the previous call.
  """
  pageToken: String
  """
  A filter to be applied to results.
  """
  filter: String
}

type ListUsersResponse {
  """
  The list of users.
  """
  users: [User!]!
  """
  A token to retrieve next page of results.
  """
  nextPageToken: String!
}

input CreateUserRequestInput {
  """
  The user to create.
  """
  user: UserInput
}

input UpdateUserRequestInput {
  """
  The user to update.
  """
  user: UserInput!
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: FieldMaskInput
}

input DeleteUserRequestInput {
  """
  The name of the user to delete.
  """
  name: String
}

input GetUserSettingsRequestInput {
  """
  The name of the user to retrieve the settings from.
  """
  name: String!
}

input UpdateUserSettingsRequestInput {
  """
  The user settings to update.
  """
  settings: UserSettingsInput!
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: FieldMaskInput
}

input GetUserNotificationsRequestInput {
  """
  The name of the user to retrieve the notifications from.
  """
  name: String!
}

input UpdateUserNotificationsRequestInput {
  """
  The user notifications to update.
  """
  notifications: UserNotificationsInput!
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: FieldMaskInput
}

input GetUserDefaultsRequestInput {
  """
  The name of the user to retrieve the defaults from.
  """
  name: String!
}

input GetGroupRequestInput {
  """
  The name of the group to retrieve.
  """
  name: String
}

input ListGroupsRequestInput {
  """
  If unspecified, server will pick an appropriate default.
  """
  pageSize: Int
  """
  The value returned from the previous call.
  """
  pageToken: String
  """
  A filter to be applied to results.
  """
  filter: String
}

type ListGroupsResponse {
  """
  The list of groups.
  """
  groups: [Group!]!
  """
  A token to retrieve next page of results.
  """
  nextPageToken: String!
}

input CreateGroupRequestInput {
  """
  The group to create.
  """
  group: GroupInput
}

input UpdateGroupRequestInput {
  """
  The group to update.
  """
  group: GroupInput!
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: FieldMaskInput
}

input DeleteGroupRequestInput {
  """
  The name of the group to delete.
  """
  name: String
}

enum UserSettings_Visibility {
  """
  Not specified.
  """
  VISIBILITY_UNSPECIFIED
  """
  Public.
  """
  PUBLIC
  """
  Private.
  """
  PRIVATE
}

enum Gender {
  """
  Not specified.
  """
  GENDER_UNSPECIFIED
  """
  Male.
  """
  MALE
  """
  Female.
  """
  FEMALE
  """
  Any other non-binary gender.
  """
  OTHER
}

# DO NOT EDIT! Generated by protoc-gen-graphql.

type AnimeshonIdentityV1Alpha1_Identity_Query {
  getUserProfile(input: AnimeshonIdentityV1Alpha1_GetUserProfileRequestInput!): AnimeshonIdentityV1Alpha1_UserProfile
  getUser(input: AnimeshonIdentityV1Alpha1_GetUserRequestInput!): AnimeshonIdentityV1Alpha1_User
  listUsers(input: AnimeshonIdentityV1Alpha1_ListUsersRequestInput!): AnimeshonIdentityV1Alpha1_ListUsersResponse
  getUserSettings(input: AnimeshonIdentityV1Alpha1_GetUserSettingsRequestInput!): AnimeshonIdentityV1Alpha1_UserSettings
  getUserNotifications(input: AnimeshonIdentityV1Alpha1_GetUserNotificationsRequestInput!): AnimeshonIdentityV1Alpha1_UserNotifications
  getUserDefaults(input: AnimeshonIdentityV1Alpha1_GetUserDefaultsRequestInput!): AnimeshonIdentityV1Alpha1_UserDefaults
  getGroup(input: AnimeshonIdentityV1Alpha1_GetGroupRequestInput!): AnimeshonIdentityV1Alpha1_Group
  listGroups(input: AnimeshonIdentityV1Alpha1_ListGroupsRequestInput!): AnimeshonIdentityV1Alpha1_ListGroupsResponse
}

type AnimeshonIdentityV1Alpha1_Identity_Mutation {
  createUser(input: AnimeshonIdentityV1Alpha1_CreateUserRequestInput!): AnimeshonIdentityV1Alpha1_User
  updateUser(input: AnimeshonIdentityV1Alpha1_UpdateUserRequestInput!): AnimeshonIdentityV1Alpha1_User
  deleteUser(input: AnimeshonIdentityV1Alpha1_DeleteUserRequestInput!): GoogleProtobuf_Empty
  updateUserSettings(input: AnimeshonIdentityV1Alpha1_UpdateUserSettingsRequestInput!): AnimeshonIdentityV1Alpha1_UserSettings
  updateUserNotifications(input: AnimeshonIdentityV1Alpha1_UpdateUserNotificationsRequestInput!): AnimeshonIdentityV1Alpha1_UserNotifications
  createGroup(input: AnimeshonIdentityV1Alpha1_CreateGroupRequestInput!): AnimeshonIdentityV1Alpha1_Group
  updateGroup(input: AnimeshonIdentityV1Alpha1_UpdateGroupRequestInput!): AnimeshonIdentityV1Alpha1_Group
  deleteGroup(input: AnimeshonIdentityV1Alpha1_DeleteGroupRequestInput!): GoogleProtobuf_Empty
}

"""
This message is returned only when a user wants to fetch information about
another user and the amount of information returned is greatly reduced to
ensure that personal and confidential information is never disclosed by
accident to other users. The user profile is read-only.
"""
type AnimeshonIdentityV1Alpha1_UserProfile {
  """
  The resource name of the user.
  """
  name: String!
  """
  The profile image of the user.
  """
  profileImage: String!
  """
  The banner image of the user.
  """
  bannerImage: String!
  """
  The public username of the user.
  """
  username: String!
  """
  The public discriminator of the user.
  """
  discriminator: String!
  """
  The birthday of the user, this value is hidden for private profiles.
  """
  birthday: GoogleType_Date
  """
  The gender of the user, this value is hidden for private profiles.
  """
  gender: AnimeshonIdentityV1Alpha1_Gender!
}

type AnimeshonIdentityV1Alpha1_User {
  """
  The resource name of the user.
  """
  name: String!
  """
  The uuid that identifies the user during the authentication flow.
  """
  uuid: String!
  """
  The public username of the user.
  """
  username: String!
  """
  The public discriminator of the user.
  """
  discriminator: String!
  """
  The primary email address of the user.
  """
  primaryEmail: String!
  """
  Whether the primary email address has been verified.
  """
  primaryEmailVerified: Boolean!
  """
  The given name of the user.
  """
  givenName: String!
  """
  The family name of the user.
  """
  familyName: String!
  """
  The name of the user.
  """
  displayName: String!
  """
  The country where the user is located at, must be a valid ISO-3166 code.
  """
  countryCode: String!
  """
  The locale preferred by the user, must be a valid BCP-47 code.
  """
  locale: String!
  """
  The fallback locale preferred by the user, must be a valid BCP-47 code.
  The only allowed values are eng, jpn, and jpn-Latn (romaji).
  """
  localeFallback: String!
  """
  The birthday defined by the user, this value is used to determine whether
  the user should be allowed to access explicit and sensitive content.
  """
  birthday: GoogleType_Date
  """
  The gender of the user.
  """
  gender: AnimeshonIdentityV1Alpha1_Gender!
  """
  The profile image of the user.
  """
  profileImage: String!
  """
  The banner image of the user.
  """
  bannerImage: String!
}

input AnimeshonIdentityV1Alpha1_UserInput {
  """
  The resource name of the user.
  """
  name: String
  """
  The uuid that identifies the user during the authentication flow.
  """
  uuid: String
  """
  The public username of the user.
  """
  username: String
  """
  The public discriminator of the user.
  """
  discriminator: String
  """
  The primary email address of the user.
  """
  primaryEmail: String
  """
  Whether the primary email address has been verified.
  """
  primaryEmailVerified: Boolean
  """
  The given name of the user.
  """
  givenName: String
  """
  The family name of the user.
  """
  familyName: String
  """
  The name of the user.
  """
  displayName: String
  """
  The country where the user is located at, must be a valid ISO-3166 code.
  """
  countryCode: String
  """
  The locale preferred by the user, must be a valid BCP-47 code.
  """
  locale: String
  """
  The fallback locale preferred by the user, must be a valid BCP-47 code.
  The only allowed values are eng, jpn, and jpn-Latn (romaji).
  """
  localeFallback: String
  """
  The birthday defined by the user, this value is used to determine whether
  the user should be allowed to access explicit and sensitive content.
  """
  birthday: GoogleType_DateInput
  """
  The gender of the user.
  """
  gender: AnimeshonIdentityV1Alpha1_Gender
  """
  The profile image of the user.
  """
  profileImage: String
  """
  The banner image of the user.
  """
  bannerImage: String
}

type AnimeshonIdentityV1Alpha1_UserSettings {
  """
  The resource name of the user.
  """
  name: String!
  """
  A private user will only have the username, discriminator, profile image
  and banner image public.
  """
  profileVisibility: AnimeshonIdentityV1Alpha1_UserSettings_Visibility!
  """
  Whether the user choose to see explicit content during navigation.
  """
  showExplicitContent: Boolean!
  """
  Whether the user has enabled the developer mode.
  """
  enableDeveloperMode: Boolean!
}

input AnimeshonIdentityV1Alpha1_UserSettingsInput {
  """
  The resource name of the user.
  """
  name: String
  """
  A private user will only have the username, discriminator, profile image
  and banner image public.
  """
  profileVisibility: AnimeshonIdentityV1Alpha1_UserSettings_Visibility
  """
  Whether the user choose to see explicit content during navigation.
  """
  showExplicitContent: Boolean
  """
  Whether the user has enabled the developer mode.
  """
  enableDeveloperMode: Boolean
}

type AnimeshonIdentityV1Alpha1_UserDefaults {
  """
  The system-managed album dedicated to user profile images.
  """
  albumProfile: String!
  """
  The system-managed album dedicated to user banner images.
  """
  albumBanner: String!
  """
  The system-managed playlist dedicated to user liked content.
  """
  playlistLiked: String!
  """
  The system-managed playlist dedicated to user saved for later content.
  """
  playlistLater: String!
}

type AnimeshonIdentityV1Alpha1_UserNotifications {
  """
  The resource name of the user.
  """
  name: String!
}

input AnimeshonIdentityV1Alpha1_UserNotificationsInput {
  """
  The resource name of the user.
  """
  name: String
}

type AnimeshonIdentityV1Alpha1_Group {
  """
  The resource name of the group.
  """
  name: String!
  """
  The list of members of the group. Groups might include other groups.
  """
  members: [String!]!
  """
  An etag for concurrency control, ignored during creation.
  """
  etag: String!
}

input AnimeshonIdentityV1Alpha1_GroupInput {
  """
  The resource name of the group.
  """
  name: String
  """
  The list of members of the group. Groups might include other groups.
  """
  members: [String!]
  """
  An etag for concurrency control, ignored during creation.
  """
  etag: String
}

type AnimeshonIdentityV1Alpha1_GetUserProfileRequest {
  """
  The name of the user to retrieve the profile from.
  """
  name: String!
}

input AnimeshonIdentityV1Alpha1_GetUserProfileRequestInput {
  """
  The name of the user to retrieve the profile from.
  """
  name: String
}

type AnimeshonIdentityV1Alpha1_GetUserRequest {
  """
  The name of the user to retrieve.
  """
  name: String!
}

input AnimeshonIdentityV1Alpha1_GetUserRequestInput {
  """
  The name of the user to retrieve.
  """
  name: String
}

type AnimeshonIdentityV1Alpha1_ListUsersRequest {
  """
  If unspecified, server will pick an appropriate default.
  """
  pageSize: Float!
  """
  The value returned from the previous call.
  """
  pageToken: String!
  """
  A filter to be applied to results.
  """
  filter: String!
}

input AnimeshonIdentityV1Alpha1_ListUsersRequestInput {
  """
  If unspecified, server will pick an appropriate default.
  """
  pageSize: Float
  """
  The value returned from the previous call.
  """
  pageToken: String
  """
  A filter to be applied to results.
  """
  filter: String
}

type AnimeshonIdentityV1Alpha1_ListUsersResponse {
  """
  The list of users.
  """
  users: [AnimeshonIdentityV1Alpha1_User!]!
  """
  A token to retrieve next page of results.
  """
  nextPageToken: String!
}

type AnimeshonIdentityV1Alpha1_CreateUserRequest {
  """
  The user to create.
  """
  user: AnimeshonIdentityV1Alpha1_User
}

input AnimeshonIdentityV1Alpha1_CreateUserRequestInput {
  """
  The user to create.
  """
  user: AnimeshonIdentityV1Alpha1_UserInput
}

type AnimeshonIdentityV1Alpha1_UpdateUserRequest {
  """
  The user to update.
  """
  user: AnimeshonIdentityV1Alpha1_User
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: GoogleProtobuf_FieldMask
}

input AnimeshonIdentityV1Alpha1_UpdateUserRequestInput {
  """
  The user to update.
  """
  user: AnimeshonIdentityV1Alpha1_UserInput
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: GoogleProtobuf_FieldMaskInput
}

type AnimeshonIdentityV1Alpha1_DeleteUserRequest {
  """
  The name of the user to delete.
  """
  name: String!
}

input AnimeshonIdentityV1Alpha1_DeleteUserRequestInput {
  """
  The name of the user to delete.
  """
  name: String
}

type AnimeshonIdentityV1Alpha1_GetUserSettingsRequest {
  """
  The name of the user to retrieve the settings from.
  """
  name: String!
}

input AnimeshonIdentityV1Alpha1_GetUserSettingsRequestInput {
  """
  The name of the user to retrieve the settings from.
  """
  name: String
}

type AnimeshonIdentityV1Alpha1_UpdateUserSettingsRequest {
  """
  The user settings to update.
  """
  settings: AnimeshonIdentityV1Alpha1_UserSettings
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: GoogleProtobuf_FieldMask
}

input AnimeshonIdentityV1Alpha1_UpdateUserSettingsRequestInput {
  """
  The user settings to update.
  """
  settings: AnimeshonIdentityV1Alpha1_UserSettingsInput
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: GoogleProtobuf_FieldMaskInput
}

type AnimeshonIdentityV1Alpha1_GetUserNotificationsRequest {
  """
  The name of the user to retrieve the notifications from.
  """
  name: String!
}

input AnimeshonIdentityV1Alpha1_GetUserNotificationsRequestInput {
  """
  The name of the user to retrieve the notifications from.
  """
  name: String
}

type AnimeshonIdentityV1Alpha1_UpdateUserNotificationsRequest {
  """
  The user notifications to update.
  """
  notifications: AnimeshonIdentityV1Alpha1_UserNotifications
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: GoogleProtobuf_FieldMask
}

input AnimeshonIdentityV1Alpha1_UpdateUserNotificationsRequestInput {
  """
  The user notifications to update.
  """
  notifications: AnimeshonIdentityV1Alpha1_UserNotificationsInput
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: GoogleProtobuf_FieldMaskInput
}

type AnimeshonIdentityV1Alpha1_GetUserDefaultsRequest {
  """
  The name of the user to retrieve the defaults from.
  """
  name: String!
}

input AnimeshonIdentityV1Alpha1_GetUserDefaultsRequestInput {
  """
  The name of the user to retrieve the defaults from.
  """
  name: String
}

type AnimeshonIdentityV1Alpha1_GetGroupRequest {
  """
  The name of the group to retrieve.
  """
  name: String!
}

input AnimeshonIdentityV1Alpha1_GetGroupRequestInput {
  """
  The name of the group to retrieve.
  """
  name: String
}

type AnimeshonIdentityV1Alpha1_ListGroupsRequest {
  """
  If unspecified, server will pick an appropriate default.
  """
  pageSize: Float!
  """
  The value returned from the previous call.
  """
  pageToken: String!
  """
  A filter to be applied to results.
  """
  filter: String!
}

input AnimeshonIdentityV1Alpha1_ListGroupsRequestInput {
  """
  If unspecified, server will pick an appropriate default.
  """
  pageSize: Float
  """
  The value returned from the previous call.
  """
  pageToken: String
  """
  A filter to be applied to results.
  """
  filter: String
}

type AnimeshonIdentityV1Alpha1_ListGroupsResponse {
  """
  The list of groups.
  """
  groups: [AnimeshonIdentityV1Alpha1_Group!]!
  """
  A token to retrieve next page of results.
  """
  nextPageToken: String!
}

type AnimeshonIdentityV1Alpha1_CreateGroupRequest {
  """
  The group to create.
  """
  group: AnimeshonIdentityV1Alpha1_Group
}

input AnimeshonIdentityV1Alpha1_CreateGroupRequestInput {
  """
  The group to create.
  """
  group: AnimeshonIdentityV1Alpha1_GroupInput
}

type AnimeshonIdentityV1Alpha1_UpdateGroupRequest {
  """
  The group to update.
  """
  group: AnimeshonIdentityV1Alpha1_Group
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: GoogleProtobuf_FieldMask
}

input AnimeshonIdentityV1Alpha1_UpdateGroupRequestInput {
  """
  The group to update.
  """
  group: AnimeshonIdentityV1Alpha1_GroupInput
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: GoogleProtobuf_FieldMaskInput
}

type AnimeshonIdentityV1Alpha1_DeleteGroupRequest {
  """
  The name of the group to delete.
  """
  name: String!
}

input AnimeshonIdentityV1Alpha1_DeleteGroupRequestInput {
  """
  The name of the group to delete.
  """
  name: String
}

enum AnimeshonIdentityV1Alpha1_UserSettings_Visibility {
  """
  Not specified.
  """
  VISIBILITY_UNSPECIFIED
  """
  Public.
  """
  PUBLIC
  """
  Private.
  """
  PRIVATE
}

enum AnimeshonIdentityV1Alpha1_Gender {
  """
  Not specified.
  """
  GENDER_UNSPECIFIED
  """
  Male.
  """
  MALE
  """
  Female.
  """
  FEMALE
  """
  Any other non-binary gender.
  """
  OTHER
}

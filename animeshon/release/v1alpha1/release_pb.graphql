# DO NOT EDIT! Generated by protoc-gen-graphql.

type Release {
  """
  The release resource name.
  """
  name: String!
  """
  The human-readable display name of the release.
  """
  displayName: String!
  """
  The short description of the release.
  """
  description: String!
  """
  The authoritative release is set only for sub-licensed releases that do not
  hold any publishing rights on the content being distributed.

  A common case where the release is to be considered non-authoritative is
  a translation released by third-parties. In such scenario the original
  author(s) is to be considered the only publishing authority over the
  content.

  If for any reason the authoritative release were to be unpublished or
  deleted from Animeshon all associated non-authoritative releases will
  be automatically hidden from public consumption and marked as suspended.

  Furthermore, there can only be one authoritative release per resource,
  which means that you can have unlimited non-authoritative releases for one
  resource but it must have exactly one authoritative release.
  """
  authoritativeRelease: String!
  """
  The resource being released.
  """
  resource: String!
  """
  The product included in the release.
  """
  asset: String!
  """
  The group of users authorized to access the asset.
  """
  accessGroup: String!
  """
  The visibility of the resources included in the asset.
  """
  visibility: Visibility!
  """
  The current release state.
  """
  state: Release_State!
  """
  The map of labels associated with the release.
  """
  labels: [Release_LabelsEntry!]!
  """
  The timestamp at which the release was created.
  """
  createTime: DateTime
  """
  The latest timestamp at which the release was updated.
  """
  updateTime: DateTime
  """
  The timestamp at which the release will expire.
  """
  expireTime: DateTime
  """
  The timestamp at which the release was deleted.
  """
  deleteTime: DateTime
}

input ReleaseInput {
  """
  The release resource name.
  """
  name: String
  """
  The human-readable display name of the release.
  """
  displayName: String
  """
  The short description of the release.
  """
  description: String
  """
  The authoritative release is set only for sub-licensed releases that do not
  hold any publishing rights on the content being distributed.

  A common case where the release is to be considered non-authoritative is
  a translation released by third-parties. In such scenario the original
  author(s) is to be considered the only publishing authority over the
  content.

  If for any reason the authoritative release were to be unpublished or
  deleted from Animeshon all associated non-authoritative releases will
  be automatically hidden from public consumption and marked as suspended.

  Furthermore, there can only be one authoritative release per resource,
  which means that you can have unlimited non-authoritative releases for one
  resource but it must have exactly one authoritative release.
  """
  authoritativeRelease: String
  """
  The resource being released.
  """
  resource: String
  """
  The product included in the release.
  """
  asset: String
  """
  The group of users authorized to access the asset.
  """
  accessGroup: String
  """
  The visibility of the resources included in the asset.
  """
  visibility: Visibility
  """
  The map of labels associated with the release.
  """
  labels: [Release_LabelsEntryInput!]
}

"""
`Release_LabelsEntry` represents the `labels` map in `animeshon.release.v1alpha1.Release`.
"""
type Release_LabelsEntry {
  key: String!
  value: String!
}

"""
`Release_LabelsEntryInput` represents the `labels` map in `animeshon.release.v1alpha1.Release`.
"""
input Release_LabelsEntryInput {
  key: String
  value: String
}

"""
The release strategy describes how a release should be published.
"""
type ReleaseStrategy {
  """
  Whether the release should be available only to the members of a group.
  """
  membershipOnly: Boolean!
}

"""
The release strategy describes how a release should be published.
"""
input ReleaseStrategyInput {
  """
  Whether the release should be available only to the members of a group.
  """
  membershipOnly: Boolean
}

input GetReleaseRequestInput {
  """
  The name of the release to retrieve.
  """
  name: String
}

input ListReleasesRequestInput {
  """
  The parent to list releases from.
  """
  parent: String!
  """
  If unspecified, server will pick an appropriate default.
  """
  pageSize: Int
  """
  The value returned from the previous call.
  """
  pageToken: String
  """
  A filter to be applied to results.
  """
  filter: String
}

type ListReleasesResponse {
  """
  The list of releases.
  """
  releases: [Release!]!
  """
  A token to retrieve next page of results.
  """
  nextPageToken: String!
}

input CreateReleaseRequestInput {
  """
  The parent this release belongs to.
  """
  parent: String!
  """
  The release to create.
  """
  release: ReleaseInput
  """
  The time-to-live indicating for how long this release should be published.
  If set to zero, the release will not have an expiration time.
  """
  ttl: DurationInput
}

input UpdateReleaseRequestInput {
  """
  The release to update.
  """
  release: ReleaseInput!
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: FieldMaskInput
}

input DeleteReleaseRequestInput {
  """
  The name of the release to delete.
  """
  name: String
}

input UndeleteReleaseRequestInput {
  """
  The name of the release to undelete.
  """
  name: String
}

input PublishReleaseRequestInput {
  """
  The name of the release to publish.
  """
  name: String
  """
  The release strategy to use.
  """
  strategy: ReleaseStrategyInput
}

type PublishReleaseResponse {
  _empty: Boolean
}

input UnpublishReleaseRequestInput {
  """
  The name of the release to publish.
  """
  name: String
}

type UnpublishReleaseResponse {
  _empty: Boolean
}

input ScheduleReleaseRequestInput {
  """
  The name of the release to schedule.
  """
  name: String
  """
  The release strategy to use.
  """
  strategy: ReleaseStrategyInput
}

type ScheduleReleaseResponse {
  _empty: Boolean
}

input CancelReleaseRequestInput {
  """
  The name of the release to cancel.
  """
  name: String
}

type CancelReleaseResponse {
  _empty: Boolean
}

input SuspendReleaseRequestInput {
  """
  The name of the release to suspend.
  """
  name: String
  """
  The reason why the release has been suspended.
  """
  reason: String
}

type SuspendReleaseResponse {
  _empty: Boolean
}

enum Release_State {
  """
  The default value. This value is used if the state is omitted.
  """
  STATE_UNSPECIFIED
  """
  The release has been published and is available to the general public.
  """
  ACTIVE
  """
  The release has been scheduled and will be made automatically available
  to the public according to the scheduling conditions.
  """
  SCHEDULED
  """
  The release is a draft and is still being worked on.
  """
  DRAFT
  """
  The release has been suspended. This state might automatically being set
  for non-authoritative releases when their authoritative release is also
  suspended, unpublished, or deleted. This state might also be set when a
  release is breaching general terms and conditions or is in conflict with
  community guidelines or internal governing policies.
  """
  SUSPENDED
  """
  The release has been marked for deletion.
  """
  DELETED
}

enum Visibility {
  """
  The default value. This value is used if the state is omitted.
  """
  VISIBILITY_UNSPECIFIED
  """
  The release is private and can only be accessed by users and service
  accounts that have been granted direct access to the release resource via
  explicit or inherited IAM policies.
  """
  PRIVATE
  """
  The release has been published and access to its assets is limited to
  members that have paid the membership fee (e.g. a user who has bought the
  release).
  """
  MEMBERSHIP
  """
  The release has been published and all of its assets are publicly available
  to all users.
  """
  PUBLIC
}

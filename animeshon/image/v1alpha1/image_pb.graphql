# DO NOT EDIT! Generated by protoc-gen-graphql.

type AnimeshonImageV1Alpha1_Album {
  """
  The album resource name.
  """
  name: String!
  """
  The album display name.
  """
  displayName: String!
}

input AnimeshonImageV1Alpha1_AlbumInput {
  """
  The album resource name.
  """
  name: String
  """
  The album display name.
  """
  displayName: String
}

type AnimeshonImageV1Alpha1_AlbumSettings {
  """
  The album resource name.
  """
  name: String!
  """
  The bucket where to store resources.
  """
  bucket: String!
  """
  Whether the album is system managed.
  """
  systemManaged: Boolean!
  """
  Whether images in this album show up in the search engine results.
  """
  enableSearch: Boolean!
  """
  Whether images in this album can be annotated.
  """
  enableAnnotation: Boolean!
  """
  Whether images in this album must be client-side encrypted.
  """
  enableEncryption: Boolean!
  """
  Whether the content of this album is highly visible by the public such as
  profile pictures and banners. Highly visible albums *cannot* contain
  sensitive or adult images.
  """
  highVisibility: Boolean!
}

input AnimeshonImageV1Alpha1_AlbumSettingsInput {
  """
  The album resource name.
  """
  name: String
  """
  The bucket where to store resources.
  """
  bucket: String
  """
  Whether the album is system managed.
  """
  systemManaged: Boolean
  """
  Whether images in this album show up in the search engine results.
  """
  enableSearch: Boolean
  """
  Whether images in this album can be annotated.
  """
  enableAnnotation: Boolean
  """
  Whether images in this album must be client-side encrypted.
  """
  enableEncryption: Boolean
  """
  Whether the content of this album is highly visible by the public such as
  profile pictures and banners. Highly visible albums *cannot* contain
  sensitive or adult images.
  """
  highVisibility: Boolean
}

type AnimeshonImageV1Alpha1_UploadImageRequest {
  """
  The image parent of the image. This value defaults to the user performing
  the upload operation if no parent is set.
  """
  parent: String!
  """
  The image content, represented as an HttpBody.
  """
  body: GoogleApi_HttpBody
}

input AnimeshonImageV1Alpha1_UploadImageRequestInput {
  """
  The image parent of the image. This value defaults to the user performing
  the upload operation if no parent is set.
  """
  parent: String
  """
  The image content, represented as an HttpBody.
  """
  body: GoogleApi_HttpBodyInput
}

type AnimeshonImageV1Alpha1_UploadImageResponse {
  """
  The image resource name.
  """
  name: String!
}

type AnimeshonImageV1Alpha1_ImportImageRequest {
  """
  The image parent of the image. This value defaults to the user performing
  the import operation if no parent is set.
  """
  parent: String!
  """
  A publicly-accessible image HTTP/HTTPS URL. When fetching images from
  HTTP/HTTPS URLs, Animeshon cannot guarantee that the request will be
  completed. Your request may fail if the specified host denies the
  request (e.g. due to request throttling or DoS prevention), or if
  Animeshon throttles requests to the site for abuse prevention. You should
  not depend on externally-hosted images for production applications.
  """
  uri: String!
  """
  The web cache options to apply to the import request.
  """
  cacheOptions: AnimeshonImageV1Alpha1_ImportImageRequest_WebCacheOptions
}

input AnimeshonImageV1Alpha1_ImportImageRequestInput {
  """
  The image parent of the image. This value defaults to the user performing
  the import operation if no parent is set.
  """
  parent: String
  """
  A publicly-accessible image HTTP/HTTPS URL. When fetching images from
  HTTP/HTTPS URLs, Animeshon cannot guarantee that the request will be
  completed. Your request may fail if the specified host denies the
  request (e.g. due to request throttling or DoS prevention), or if
  Animeshon throttles requests to the site for abuse prevention. You should
  not depend on externally-hosted images for production applications.
  """
  uri: String
  """
  The web cache options to apply to the import request.
  """
  cacheOptions: AnimeshonImageV1Alpha1_ImportImageRequest_WebCacheOptionsInput
}

"""
The WebCache options to be used when importing an image from a public
website address.
"""
type AnimeshonImageV1Alpha1_ImportImageRequest_WebCacheOptions {
  """
  If refresh is set to true the image is imported from the remote address
  regardless of an existing local cache, if the fetched image does not
  match the existing cache the new image is stored and a new resource is
  created, otherwise the existing (cached) resource is returned.
  """
  refresh: Boolean!
  """
  If ignore is set to true no cache lookup is performed and the image is
  imported into a new resource. If both "ignore" and "refresh" are set to
  true then "refresh" has no effect.
  """
  ignore: Boolean!
}

"""
The WebCache options to be used when importing an image from a public
website address.
"""
input AnimeshonImageV1Alpha1_ImportImageRequest_WebCacheOptionsInput {
  """
  If refresh is set to true the image is imported from the remote address
  regardless of an existing local cache, if the fetched image does not
  match the existing cache the new image is stored and a new resource is
  created, otherwise the existing (cached) resource is returned.
  """
  refresh: Boolean
  """
  If ignore is set to true no cache lookup is performed and the image is
  imported into a new resource. If both "ignore" and "refresh" are set to
  true then "refresh" has no effect.
  """
  ignore: Boolean
}

type AnimeshonImageV1Alpha1_ImportImageResponse {
  """
  The response is either the imported image or a remote error with details.
  """
  response: AnimeshonImageV1Alpha1_ImportImageResponse_ResponseOneof
  """
  Whether this image was found in the cache.
  """
  cacheHit: Boolean!
}

"""
`AnimeshonImageV1Alpha1_ImportImageResponse_ResponseOneof` represents the `response` oneof in `animeshon.image.v1alpha1.ImportImageResponse`.
"""
union AnimeshonImageV1Alpha1_ImportImageResponse_ResponseOneof = AnimeshonImageV1Alpha1_ImportImageResponse_ResponseOneof_Result | AnimeshonImageV1Alpha1_ImportImageResponse_ResponseOneof_Error

"""
`AnimeshonImageV1Alpha1_ImportImageResponse_ResponseOneof_Result` represents the `result` oneof field in `animeshon.image.v1alpha1.ImportImageResponse`.
"""
type AnimeshonImageV1Alpha1_ImportImageResponse_ResponseOneof_Result {
  _typename: String
  """
  If the import was successful this field will provide the newly created
  image resource name.
  """
  result: AnimeshonImageV1Alpha1_ImportImageResponse_ImportImageResult
}

"""
`AnimeshonImageV1Alpha1_ImportImageResponse_ResponseOneof_Error` represents the `error` oneof field in `animeshon.image.v1alpha1.ImportImageResponse`.
"""
type AnimeshonImageV1Alpha1_ImportImageResponse_ResponseOneof_Error {
  _typename: String
  """
  If the import ended up in a failure due to an error with the remote
  server this field will provide more details about the failure.
  """
  error: AnimeshonImageV1Alpha1_ImportImageResponse_ImportImageRemoteError
}

type AnimeshonImageV1Alpha1_ImportImageResponse_ImportImageResult {
  """
  The image resource name.
  """
  name: String!
}

type AnimeshonImageV1Alpha1_ImportImageResponse_ImportImageRemoteError {
  """
  The status code returned from the remote server.
  """
  statusCode: Float!
  """
  The details related to the import failure.
  """
  details: String!
}

type AnimeshonImageV1Alpha1_GetImageRequest {
  """
  The image resource name.
  """
  name: String!
  """
  If content type is set and differs from the original content type the image
  will be converted to match the specified content type.

  Note: only "image/png", "image/webp", "image/jpeg" are supported values.
  """
  contentType: String!
  """
  The image bounding box to use for resizing. This value is normally used
  to request image thumbnails. If both width and height are defined then the
  value with smaller ratio will be used to resize the image. The resized
  image has the closest standard ratio to the requested width or height.
  If the requested ratio is larger than the original image it is ignored.
  """
  resize: AnimeshonImageV1Alpha1_GetImageRequest_ResizeBounds
  """
  Whether the image returned should be blurred. This is typically used while
  routing images that have been detected to contain highly sensitive or
  controversial content that must be censored in some or all regions.
  """
  blur: Boolean!
}

input AnimeshonImageV1Alpha1_GetImageRequestInput {
  """
  The image resource name.
  """
  name: String
  """
  If content type is set and differs from the original content type the image
  will be converted to match the specified content type.

  Note: only "image/png", "image/webp", "image/jpeg" are supported values.
  """
  contentType: String
  """
  The image bounding box to use for resizing. This value is normally used
  to request image thumbnails. If both width and height are defined then the
  value with smaller ratio will be used to resize the image. The resized
  image has the closest standard ratio to the requested width or height.
  If the requested ratio is larger than the original image it is ignored.
  """
  resize: AnimeshonImageV1Alpha1_GetImageRequest_ResizeBoundsInput
  """
  Whether the image returned should be blurred. This is typically used while
  routing images that have been detected to contain highly sensitive or
  controversial content that must be censored in some or all regions.
  """
  blur: Boolean
}

"""
The image resize bounds.
"""
type AnimeshonImageV1Alpha1_GetImageRequest_ResizeBounds {
  """
  The image width.
  """
  width: Float!
  """
  The image height.
  """
  height: Float!
}

"""
The image resize bounds.
"""
input AnimeshonImageV1Alpha1_GetImageRequest_ResizeBoundsInput {
  """
  The image width.
  """
  width: Float
  """
  The image height.
  """
  height: Float
}

type AnimeshonImageV1Alpha1_GetAlbumRequest {
  """
  The name of the album to retrieve.
  """
  name: String!
}

input AnimeshonImageV1Alpha1_GetAlbumRequestInput {
  """
  The name of the album to retrieve.
  """
  name: String
}

type AnimeshonImageV1Alpha1_ListAlbumsRequest {
  """
  The parent, which owns this collection of albums.
  """
  parent: String!
  """
  If unspecified, server will pick an appropriate default.
  """
  pageSize: Float!
  """
  The value returned from the previous call.
  """
  pageToken: String!
  """
  A filter to be applied to results.
  """
  filter: String!
}

input AnimeshonImageV1Alpha1_ListAlbumsRequestInput {
  """
  The parent, which owns this collection of albums.
  """
  parent: String
  """
  If unspecified, server will pick an appropriate default.
  """
  pageSize: Float
  """
  The value returned from the previous call.
  """
  pageToken: String
  """
  A filter to be applied to results.
  """
  filter: String
}

type AnimeshonImageV1Alpha1_ListAlbumsResponse {
  """
  The list of albums.
  """
  albums: [AnimeshonImageV1Alpha1_Album!]!
  """
  A token to retrieve next page of results.
  """
  nextPageToken: String!
}

type AnimeshonImageV1Alpha1_CreateAlbumRequest {
  """
  The parent this album belongs to.
  """
  parent: String!
  """
  The album to create.
  """
  album: AnimeshonImageV1Alpha1_Album
}

input AnimeshonImageV1Alpha1_CreateAlbumRequestInput {
  """
  The parent this album belongs to.
  """
  parent: String
  """
  The album to create.
  """
  album: AnimeshonImageV1Alpha1_AlbumInput
}

type AnimeshonImageV1Alpha1_DeleteAlbumRequest {
  """
  The album to delete.
  """
  name: String!
}

input AnimeshonImageV1Alpha1_DeleteAlbumRequestInput {
  """
  The album to delete.
  """
  name: String
}

type AnimeshonImageV1Alpha1_GetAlbumSettingsRequest {
  """
  The name of the album to retrieve settings from.
  """
  name: String!
}

input AnimeshonImageV1Alpha1_GetAlbumSettingsRequestInput {
  """
  The name of the album to retrieve settings from.
  """
  name: String
}

type AnimeshonImageV1Alpha1_UpdateAlbumSettingsRequest {
  """
  The album settings to update.
  """
  settings: AnimeshonImageV1Alpha1_AlbumSettings
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: GoogleProtobuf_FieldMask
}

input AnimeshonImageV1Alpha1_UpdateAlbumSettingsRequestInput {
  """
  The album settings to update.
  """
  settings: AnimeshonImageV1Alpha1_AlbumSettingsInput
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: GoogleProtobuf_FieldMaskInput
}

type AnimeshonImageV1Alpha1_GetImageRouteRequest {
  name: String!
}

input AnimeshonImageV1Alpha1_GetImageRouteRequestInput {
  name: String
}

type AnimeshonImageV1Alpha1_GetImageRouteResponse {
  """
  A routable url that points to a link address backed by the CDN.
  """
  url: String!
}

type AnimeshonImageV1Alpha1_RouteImageRequest {
  """
  The host that received the request.
  """
  host: String!
  """
  The requested path representing an opaque route.
  """
  path: String!
}

input AnimeshonImageV1Alpha1_RouteImageRequestInput {
  """
  The host that received the request.
  """
  host: String
  """
  The requested path representing an opaque route.
  """
  path: String
}
